pipeline {
    environment {
        imagename = "paivae/mundose-web"
        dockerImage = ''
        containerName = 'mundose-webapp-test'
        containerNameProd = 'mundose-webapp-prod'
        dockerHubCredentials = 'DockerHubs'
    }
    agent any
    stages {

        stage('hello') {
            steps {
                sh 'echo Hello Jenkins!'
            }
        }

        stage('SonarQube Code') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    script {
                        scannerHome = tool 'Sonarqube';
                    }
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Build Docker') {
            steps {
                dir(path: 'web/'){
                    sh 'docker build -t ${imagename} .'
                    echo 'Docker Build Finalizado'
                }
            }
        }

        stage('Test Docker') {
            steps {
                sh 'docker run -d -p 90:80 --name ${containerName} ${imagename}:latest'
                script{

                    cmd = "curl -s -X GET -H 'accept: */*' 'mundose.paivae.com:90/ping' "

                    response = sh(script: cmd, returnStdout: true).trim()
                                
                    echo "HTTP Code Response: ${response}"

                    if (response != "200") {
                        error('Test: El servicio no esta funcionando')
                    } 
                }
                echo 'Test Finalizado'
                
            }
        }

        stage('Stop Image') {
            steps {
                sh "docker stop ${containerName} || true"
                sh "docker rm ${containerName} || true"
                echo 'Imagen borrada'
            }
        }

        stage('Upload Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: dockerHubCredentials, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
 
                        sh "docker push ${imagename}:latest"
                    }
                }
            }
        }

        stage('Deploy Prod') {
            steps {
                sh "docker stop ${containerNameProd} || true"
                sh "docker rm ${containerNameProd} || true"
                sh 'docker run -d -p 80:80 --name ${containerNameProd} ${imagename}:latest'
                echo 'En Prod!!'
            }
        }
    }   

    post {
    always {
      sh 'docker logout'
      echo 'Session cerrada de docker'
      // Si falla en algun paso, se debe borrar el contenedor de test igual
      sh "docker stop ${containerName} || true"
      sh "docker rm ${containerName} || true"
    }
  }
}

